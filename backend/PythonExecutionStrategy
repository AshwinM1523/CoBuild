const { PythonShell } = require('python-shell');
const { v4: uuidv4 } = require('uuid');
const _ = require('lodash');
const path = require('path');
const fs = require('fs');

class PythonExecutionStrategy extends CodeExecutionStrategy {
    executeCode(code, tests) {
        const results = [];

         // Generate a unique temporary file name
         const tempFileName = `${uuidv4()}.py`;
         const tempFilePath = path.join(__dirname, tempFileName);
 
         // Write the code to the temporary file
         fs.writeFileSync(tempFilePath, code);

        // Execute the code for each test case
        for (const test of tests) {
            const input = test[0];
            const expectedResult = test[1];

            // Execute the code using the PythonShell library
            const options = {
                mode: 'text',
                pythonOptions: ['-u'], // get print results in real-time
                args: input
            };

            PythonShell.runString(code, options, (err, results) => {

                // Remove the temporary file
                fs.unlinkSync(tempFilePath);

                if (err) {
                    // Handle the error if code execution fails
                    results.push({ test, testPassed: false, error: err });
                } else {
                    // Compare the expected and actual output
                    const actualResult = output[0];
                    const testPassed = _.isEqual(expectedResult, actualResult);
                    results.push({ test, testPassed, actualResult });
                }

                // Check if all tests have been executed
                if (results.length === tests.length) {
                    // Perform any necessary further processing or return the results
                    console.log(results);
                }
            });
        }

        return results;
    }
}